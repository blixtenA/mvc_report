{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <h1>Metrics report</h1>
    <div class="columns">
        <div class="column">
            <h2>Introduktion</h2>
                <h3>Codestyle (kodstil):</h3>
                <p>
                Kodstil handlar om att följa en enhetlig stil i hela koden. 
                En konsekvent stil gör det lättare att läsa och förstå koden 
                samt underlättar samarbete mellan utvecklare.</p>

                <h3>Coverage (täckning):</h3>
                <p>
                Mäter hur väl testerna täcker koden. Genom att ha en 
                hög testtäckning kan man vara säker på att kritisk funktionalitet 
                testas ordentligt och att buggar upptäcks tidigt.</p>
                
                <h3>Complexity (komplexitet):</h3>
                <p>
                Mäter hur komplicerad koden är att förstå och underhålla. 
                Låg komplexitet är önskvärd, eftersom det gör koden mer läsbar, 
                felsökningsvänlig och enklare att vidareutveckla.
                I min kod fick jag relativt hög komplexitet på funktionen hit för 21-spelet.
                Detta berodde säkert på att hit täcker många olika scenarion, beroende på 
                om det är spelaren eller bankens tur att spela och hur respektive spelare ska 
                kunna bete sig, inklusive exit-villkor för spelet (game over).</p>
                
                <h3>Cohesion (sammanhållning):</h3> 
                <p>
                Mäter hur väl en modul, en klass eller en funktion fokuserar 
                på en enda uppgift. Högre sammanhållning innebär att koden har 
                tydliga ansvarsområden och är mindre benägen att påverkas av ändringar 
                i andra delar av systemet.</p>
                
                <h3>Coupling (koppling):</h3> 
                <p>
                Mäter hur beroende en modul, en klass eller en funktion är av 
                andra delar av systemet. Låg koppling innebär att ändringar i en 
                del inte har stor påverkan på andra delar, vilket ökar flexibiliteten 
                och underhållbarheten i koden.</p>
                
                <h3>CRAP (Change Risk Analysis and Predictions, förändringsriskanalys och förutsägelser):</h3>
                <p>
                CRAP-mätningen kombinerar kodkomplexitet och testtäckning för att 
                identifiera högriskkod. Högt CRAP-värde indikerar att kodraden är 
                både komplex och dåligt täckt av tester, vilket kan öka risken för 
                buggar och problem vid ändringar.</p>

                <h2>Förbättringar (före)</h2>
                <p>
                    De förbättringar jag kommer att arbeta med är att:
                    <ul>
                        <li>åtgärda småfel som identifierades av Scrutinizer</li>
                        <li>minska komplexiteten i Game-klassen</li>
                        <li>minska LCOM för Rules</li> 
                        <li>skriva en uppsättning test för en controller-klass</li>
                    </ul>
                Jag valde några saker med olika 
                karaktär och olika lösningar för att försöka se förbättringar av olika mätvärden. Även om 
                mina poäng inte var dåliga till att börja med så hoppas jag kunna se någon förbättring här och var. 
                </p>

                <h2>Förbättringar (efter) och diskussion</h2>
                <p>
                    Test för controllerklassen (LibraryController) -
                    Testerna tog lång tid att skriva och utöver att förbättre coverage så tycker jag inte 
                    att de bidrog med någonting. Controllern som klass känns som något man bättre testar manuellt 
                    genom att interagera med routen och använda den. Ibland kanske manuella tester är att föredra och 
                    är mer tidseffektiva än att skriva automatiska tester? Mätvärdet på coverage ändrades från 42% till 
                    47%, men å andra sidan finns det nu mycket mer kod att underhålla. Blev något bättre av detta? Istället 
                    för en relativt liten controllerklass måste man nu också underhålla en fet testklass.
                </p>
                <p>
                    Småfelen som hittades av Scrutinizer gick jag igenom och fixade. Det ändrade dock inte 9,98-poängen vare sig upp eller ner.
                </p>
                <p>
                    Jag gjorde ett försök att förbättra Rules-klassens LCOM, men jag hittade inget sätt att förbättra detta. 
                    Klassen är relativt rak och enkel som den är, med tre relativt små metoder som har tydliga uppgifter. Klassens 
                    natur är att avgöra regler i olika skeden av spelet, och jag ser inget sätt att komma runt att det blir en samling 
                    and olika regelmetoder som kanske inte har så mycket gemensamt. Klassens syfte är att vara en samling "helper"-metoder 
                    som avlastar spelklassen. Jag ser ingen vinst i att splitta upp klassen i tre olika klassen, en för varje regel, även 
                    om detta skulle förbättra LCOM. 
                </p>
                <p>
                    Mitt försök att minska komplexiteten i Game-klassen var inte framgångsrikt. De åtgärder jag vidtog var att splitta upp två metoder, hit och endOfGame. 
                    Syftet med att splitta upp dem var att renordla funktionerna och använda flera mindre funktioner med tydligare uppgifter. Till min förvåning dök 
                    Maintainability Index från 57.48 till 53.88 för klassen. Relative Sytem Complexity gick upp från 289 till 484.
                    <img class="small" src="{{ asset('img/MaintainBeforeAfter.jpg') }}" alt="">
                    Jag finner ändå resultatet intressant och bra som underlag till diskussion. Det var rimligt att anta att Game-klassen hade ett komplexitetsproblem och 
                    hit-metoden samt endOfGame-metoden var misstänkta då dessa var de enda metoderna som var snåriga med flera tänkbara returns och kod som skulle kunna läggas ut på underfunktioner. 
                    Hit-metoden var intialt en metod som kollade vems tur det var (spelarens eller bankens) och baserat på detta gick metoden in i ett av två villkor och utförde olika logik beroende på om det 
                    var spelarens eller bankens tur. Att lägga detta som separata metoder trodde jag bergsäkert skulle minska komplexiteten. Den ökade istället. MEN på detta vann jag å andra sidan bättre läsbarhet och 
                    följer bättre Single Responsibility Principle. Det kan leda till att koden blir lättare att underhålla i det långa loppet, även om mätvärdet tekniskt sett blev sämre. Ändringarna jag testade i endOfGame-klassen 
                    fick jag rulla tillbaka. Det blev helt enkelt för mycket sämre att dela upp det. Komplexiteten ökade (mycket) med de förändringarna och jag upplevde inte att hanteringen blev tydligare, så som den åtminstone blev för hit-metoden.
                    Det kan också vara värt att tänka efter före om huruvida det är värt att "bråka" med kod som redan har bra mätvärden - kanske var det tillräckligt bra som det var?
                </p>
            </div>
        <div class="column">
            <h2>Phpmetrics</h2>
            <p>
            Min kod fick överlag bra poäng i phpmetrics. Egentligen hittade jag bara en sak
            som kändes relevant att åtgärda och det var komplexiteten i Game-klassen. Den har jag
            sett som ett problemområde sedan den skrevs. 
            För att hitta två saker till att åtgärda valde jag att titta på LCOM (cohersion) och
            tog den klass som hade högst "poäng" - Rules, samt att jag ville försöka skriva test för 
            en kontroller. Det ingick inte i tidigare moment som obligatoriskt, men i brist på annat uppenbart 
            att åtgärda känns det som en vettig utmaning att testa på att skriva test för en annan typ 
            av klass och försöka nå så mycket av den koden som möjligt. 
            <img class="small" src="{{ asset('img/phpmetrics1.jpg') }}" alt="">
            </p>

            <h2>Scrutinizer</h2>            
            <p>
            Jag går in i Scrutinizer med ett startvärde på 9.98. Det betyder att koden inte har så många systematiska 
            problem och inte behöver särskilt mycket översyn. Jag hittar en "bug" i form av en doc comment 
            som inte stämmer med innehållet i Rules.php - den ska jag fixa. Jag ser att det finns 
            lite oanvänd kod i GameTest och en bug i LibraryRepository där det finns kvar en pekare på 
            Library-klassen som jag skapade och sedan tog bort. Jag kommer att gå igenom och se till att 
            de här småsakerna blir fixade. Coverage är bara 42%, men det beror ju på att vi inte skriver 
            tester för controllers. 
            <img class="small" src="{{ asset('img/Scrutinizer1.jpg') }}" alt="">
            <ul>
            <li><img src="https://scrutinizer-ci.com/g/blixtenA/mvc_report/badges/quality-score.png?b=master"></li>
            <li><img src="https://scrutinizer-ci.com/g/blixtenA/mvc_report/badges/coverage.png?b=master"></li>
            <li><a href="https://scrutinizer-ci.com/g/blixtenA/mvc_report/inspections/a2d29bce-09af-4330-ad65-cb372e1cd49e/log"><img src="https://scrutinizer-ci.com/g/blixtenA/mvc_report/badges/build.png?b=master"></a></li>
            <li><a href="https://scrutinizer-ci.com/code-intelligence"><img src="https://scrutinizer-ci.com/g/blixtenA/mvc_report/badges/code-intelligence.svg?b=master"></a></li>
        </ul>
        </p>
        </div>
    </div>    
{% endblock %}