{# templates/report.html.twig #}

{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>
    <ul>
        <li><a href="#kmom01">Kmom01</a></li>
        <li>Kmom02</li>
        <li>Kmom03</li>
        <li>Kmom04</li>
        <li>Kmom05</li>
        <li>Kmom06</li>

    </ul>


    <a id="kmom01"><h2>Kmom01</h2></a>
    <p>Mina tidigare erfarenheter av objektorientering är mer eller mindre det som ingick i Pythonkursen tidigare i år, med ett grundläggande dabblande i Java någon gång runt 1999.</p>
    <p>Jag vet inte om det blev så mycket tid i det här kursmomentet till att reflektera över själva klasserna i php. Jag förstår att de används här med extensions, vilket verkar elegant och kan bli kraftfullt. Jag ser fram emot att titta mer på det i mer konkreta situationer. Php är kul. Men helt ärligt, min tid den här veckan gick åt till att slåss mot installationer. Composer som jag installerade i höstas var obsolet, jag hade strul med installationerna av symfony och strul med i stort sett varenda steg.</p>
    <p>Det hade varit värdefullt att få testa på php-klasserna/objekten i en "lugnare" och mer avgränsad miljö utan att få hela ramverket i knäet på samma gång. En liten lab hade varit kanon.</p>
    <p>Min reaktion på strukturen till uppgiften är att det är stökigt, men ändå verkar okej-ish. Något mindre frustrerade och kaotiskt än webdesignkursen som var mycket värre på alla fronter. Introduktionen till att installera Symfony var tydlig och bra skriven. Det gick att komma igång, men jag är orolig för att kampen mot ramverket ska överskugga själva innehållet, som det blev i webdesignkursen.</p>
    <p>Jag bekantade mig bara översiktligt med php the right way. Jag vet att den finns och kan använda den vid behov. Det jag hoppas på är att det ska bli mer utrymme för php och klasser i nästa kursmoment.</p>
    <p>TIL - att jag tycker att det här ramverket verkar mer användbart än det vi hade i webdesignkursen, Pico mm. Skönt att slippa markdown and att sass är optionellt. Jag valde att helt enkelt skriva lite enkel css i app.css. I skrivandet stund har jag åtta stilar och jag behöver inget ramverk för att hantera det. Det får bli senare om behov uppstår, annars kör jag "keep it simple".</p>

    <a id="kmom02"><h2>Kmom02</h2></a>
    <p>I övningen med pig, "genvägen" för att få upp en ny symphony saknades flera steg, t.ex. htaccess, fixa sökvägen i webpack.config.js, encore mm. Delar av det som finns i exempelfilerna i app-katalogen saknas i det som visas upp för den som vill gå igenom steg för steg istället för att bara kopiera hela filen (vilket gör det betydligt svårare att följa med steg för steg jämfört med att kopiera in). I övrigt en bra och tydlig (men stor) genomgång som gav många bra tips.</p>
    <p>Spelkorten och spelet tyckte jag var kul att bygga. Jag tycker om klasser och jag tycker att det funkade skapligt smidigt med routerna, även om jag inte riktigt förstod varför man behövde en post-route för att shuffla decken i API-delen. API-delen kunde möjligen behöva lite tydligare instruktioner, t.ex. om listan över routar till api landing måste genereras eller om den kan vara hårt skriven. Jag skrev den manuellt och hoppas på det bästa. </p>
    <p>Jag låg lite efter med det här momentet, men annars hade jag gärna gjort extrauppgiften. Den verkade matig och rolig. Misstänker att något liknande kommer senare, så jag får förhoppningsvis fler möjligheter till det. </p>
    <p>Arv (inheritance) innebär att en klass ärver egenskaper och metoder från en annan klass, vilket gör det möjligt att skapa hierarkier. Arv används ofta när man vill skapa en basklass som kan återanvändas i flera andra klasser.</p>
    <p>Komposition (composition) innebär att man skapar en klass som innehåller andra klasser som medlemmar, eller attribut. Kortleken är ett mycket bra exempel på en komposition som innehåller kort.</p>
    <p>Interface är en abstrakt klass som jag inte har koll på än.</p>
    <p>En trait definierar en uppsättning metoder som kan användas av flera olika klasser genom att inkludera traiten i klassens definition. Jag hade nog kunnat använda min metod getCardAsString som en trait, i och med att den finns i både handen och decken, kopierad i stort sett rakt av eftersom den behövdes i båda klasserna men i en identisk funktion då den drar från samma objekt (kort).</p>
    <p>Jag är någorlunda nöjd, men ser förbättringar på styling av korten. Jag vill gärna lära mig mer om klasser och metoder, så jag ser fram emot nästa kursmoment. </p>

    <a id="kmom03"><h2>Kmom03</h2></a>
    <p>Att modellera kortspelet med flödesdiagram och pseudokod vad ingenting som varken hjälpte eller var ivägen. Jag får inget särskilt ut av att rita diagram för sådana här små flöden, arbetar oftast bättre och snabbare i hjärnan utan visuella hjälpmedel såvida det inte är väldigt stort och komplext. Pseudokod... spelreglerna fungerar ju redan som pseudokod, så det tyckte jag inte behövdes i den här uppgiften. Om jag hade byggt en mer avancerad datorspelare hade det nog varit till hjälp!</p>
    <p>Jag utgick i så stor utsträckning som jag kunde från klasserna jag hade sedan tidigare. Jag snyggade till korten med rött för ruter och hjärter. Jag byggde ett antal nya routar för att spela spelet med utgångspunkt från en play-sida. Initialt skrev jag nästan hela spelet utan en spelarklass, men på slutet så gick jag igenom koden och tyckte att jag hade för mycket i routarna, så jag lade till en spelarklass. Det var roligt att bygga spelet! Grunduppgiften tyckte jag var relativt enkel i det här momentet, jämfört med att komma igång med moment 1 och 2. Jag hade mycket strul med att få igång linterverktygen, vet fortfarande inte om de riktigt funkar som de ska.</p>
    <p>Jag tycker att Symfony är relativt okej. Det känns lite stabilare än det vi hade i webdesign-kursen. Jag tycker kanske att det inte riktigt främjar förståelse av vad som händer i bakgrunden i ett bygge. Det är en del som är automatiserat som hade varit bra att förstå. Publishpure tog 15 minuter första gången och är sjukt segt därefter, hundratals filer som tydligen har ändrats utan att jag har någon aning om vad som har ändrats och varför. Det hade varit väldigt bra om vi hade fått använda samma ramverk i mer än en kurs istället för att hoppa mellan olika, för att på det sättet kanske komma ner lite djupare i något av dem. I allmänhet känns den här kursen tydligare än webdesignkursen och verktygen känns mer till hjälp än till hinder, vilket är bra.</p>
    <p>Jag valde att skapa en pengabank med enkel vadslagning där datorn slår vad som slutmässigt helt tiotal av pengarna den har kvar. Jag ville göra något extra utöver det grundläggande, men valde att inte göra hela paketet - hoppas kunna skapa mig lite tid att komplettera upp det sista i databaskursen.</p>
    <p>TIL att man targeta CSS baserat på datafamilj. Det var en kul upptäckt! Jag använde det för att styla korten röda istället för svarta. </p>

    <a id="kmom04"><h2>Kmom04</h2></a>
    <p>Jag skrev en testsvit för mina kortklasser. Jag jämför såklart php med Python som vi skrev enhetstester i senast, och jag föredrar definitivt Python. Det kändes rakare och enklare. Php var ganska knöligt att jobba med, särskilt när så många olika lintrar kom in.</p>
    <p>Jag lyckades faktiskt nå 91-92% kodtäckning! Då testade jag Card, CardHand, DeckOfCards, Game, Player, Rules. Den klassen med lägst testgrad hamnade precis över 70%. Några av klasserna var lite röriga, märkte jag. Jag hade också en del strul med att mitt kortspel (dumt nog) alltid startar med två kort som automatiskt dras. Det var smidigt för spelet, men dåligt för testning. Jag valde att behålla den funktionen, eftersom jag inte skriver koden för att mata testerna utan för att göra ett kul spel.</p>
    <p>Delar av koden hade jag definitivt skrivit annorlunda om jag hade skrivit enhetstesterna samtidigt. Kommer tänka mer aktivt på det till nästa gång.</p>
    <p>Jag skrev inte om koden eftersom den fungerar, men jag förstod mina svagheter och vad som borde förbättras.</p>
    <p>Att skriva koden testbar från början hade definitivt gjort den renare och bättre uppdelad.</p>
    <p>TIL att enhetstester kan hjälpa till att strukturera koden.</p>

    <a id="kmom05"><h2>Kmom05</h2></a>
    <a id="kmom06"><h2>Kmom06</h2></a>                

{% endblock %}